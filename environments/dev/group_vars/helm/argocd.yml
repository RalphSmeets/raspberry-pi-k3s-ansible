---
argocd:
  oidc:
    client:
      id: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{universe.environment }}/group_vars/oidc/clients/argocd', **vault_options )['secret']['id'] }}"
      secret: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{universe.environment }}/group_vars/oidc/clients/argocd', **vault_options )['secret']['secret'] }}"

  github:
    projects:
      - name: k8s-deployments
        url: "{{ git_clone_ssh_url }}:RalphSmeets"
      - name: k8s-frambozen
        url: "{{ git_clone_ssh_url}}:K8S-Frambozen"
    ssh_key: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_private_key'] }}"
    known_hosts: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_known_hosts'] }}"
    webhook:
      secret: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_webhook_secret'] }}"
    token: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_token'] }}"
    username: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_username'] }}"
    password: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_password'] }}"

  avp:
    role_id: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['avp_role_id'] }}"
    secret_id: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['avp_secret_id'] }}"

  server:
    admin_password: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['default_admin_password'] }}"
  tls:
    certificates:
      github_api: "{{ lookup('community.hashi_vault.vault_kv2_get', '{{ universe.environment }}/group_vars/helm/argocd', **vault_options )['secret']['github_api_pem'] }}"

# Argo CD needs to be able to connect to our private repositories. This is done using a repository template. This
# template needs a name and the base of the url of the repository.

# Configure each of the clusters (dev, pro).
  cluster:
    credentials:
      pro-cluster:
        server: https://kubernetes.default.svc
        domain: "{{ universe.environment }}.{{ universe.domain }}"
        config:
          tlsClientConfig:
            insecure: false
      tools-cluster:
        server: https://kubernetes.default.svc
        domain: tools.k8s-frambozen.nl
        config:
          tlsClientConfig:
            insecure: false
      dev-cluster:
        server: https://k3s-api.dev.k8s-frambozen.nl:6443
        domain: dev.k8s-frambozen.nl
        config:
          tlsClientConfig:
            insecure: false
            caData: "{{ lookup('community.hashi_vault.vault_kv2_get', 'dev/k8s_cluster', **vault_options )['secret']['caData'] }}"
            certData: "{{ lookup('community.hashi_vault.vault_kv2_get', 'dev/k8s_cluster', **vault_options )['secret']['certData'] }}"
            keyData: "{{ lookup('community.hashi_vault.vault_kv2_get', 'dev/k8s_cluster', **vault_options )['secret']['keyData'] }}"

# Define the AppProjects. These correspond with the different enironments. E.g. staging for development and testing applications and
# production for production. Every project has a name, a namespace (wildcard allowed) to run on/in and a cluster to run on.
# Please be aware that these are Argo CD projects and not projects of the organisation:
  app_projects:
    - name: development
      namespace: "*-dev-*"
      cluster: dev-cluster
    - name: testing
      namespace: "*-test"
      cluster: dev-cluster
    - name: acceptatie
      namespace: "*-acc"
      cluster: dev-cluster
    - name: production
      namespace: "*"
      cluster: pro-cluster
    - name: dev-tooling
      namespace: "*-tool"
      cluster: dev-cluster
    - name: pro-tooling
      namespace: "*-tool"
      cluster: pro-cluster

  # Define the projects in github that setup the applications for Argo CD
  application_sources:
    - name: k8s-frambozen
      is_organisation: true
      organisation: "K8S-Frambozen"
      repo_url: "{{ git_clone_ssh_url }}:K8S-Frambozen"
      types:
        - name: helm
          git_files_path:
            - "deployments/*/helm-application.yaml"
            - "deployments/*/*/helm-application.yaml"
        - name: kustomize
          git_files_path:
            - "deployments/*/kustomize-application.yaml"
            - "deployments/*/*/kustomize-application.yaml"

      mapping:
        # Define how all path elements are dealt with:
        team: '{% raw %}{{ index .path.segments 0 }}{% endraw %}'
        application: '{% raw %}{{ index .path.segments 1 }}{% endraw %}'
        overlay: '{% raw %}{{ index .path.segments 2 }}{% endraw %}'
        prefix: ''
        suffix: '{% raw %}{{ has ( index .path.segments 2 ) (list "development" ) | ternary ( last .path.segments | print "-%s" ) "" }}{% endraw %}'
        cluster: '{% raw %}{{ has ( index .path.segments 2 ) ( list "production") | ternary "pro-cluster" "dev-cluster" }}{% endraw %}'
        namespace: '{% raw %}{{ has ( index .path.segments 2 ) (list "dev" ) | ternary "dev-" ""}}{{ has ( index .path.segments 2 ) (list "ont" "test") | ternary ( index .path.segments 0 ) (index .path.segments 2 ) }}{{ has ( index .path.segments 2 ) (list "ont" "test") | ternary ( last .path.segments | print "-%s" ) "" }}{% endraw %}'
