---
argocd:
  oidc:
    client:
      id: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/oidc/clients/argocd[id]') }}"
      secret: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/oidc/clients/argocd[secret]') }}"

  github:
    projects:
      - name: k8s-deployements
        url: "{{ git_clone_ssh_url }}/kd"
    ssh_key: "{{ lookup('community.hashi_vault.vault_kv2_get', engine_mount_pointt='{{ vault_secrets_mountpath }}',secret='{{ universe.environment }}/group_vars/helm/argocd[github_svc_key]') }}"
    known_hosts: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[github_known_hosts]') }}"
    webhook:
      secret: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[github_webhook_secret]') }}"
    token: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[github_token]') }}"
    username: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[github_username]') }}"
    password: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[github_password]') }}"
  #vault.k3s_cluster.token: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/all/vault_k3s_cluster')['token_value'] }}"
  avp:
    role_id: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[avp_role_id]') }}"
    secret_id: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[avp_secret_id]') }}"

  server.admin_password: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/{{ universe.environment }}/group_vars/helm/argocd[default_admin_password]') }}"
  # pki2.ca_cert: "{{ lookup('ansible.builtin.url', '{{ pki_ca_url }}/PKI2-CJIB-ROOT.pem', split_lines=true, wantlist=true ) }}"

# Argo CD needs to be able to connect to our private repositories. This is done using a repository template. This
# template needs a name and the base of the url of the repository.

# Configure each of the clusters (ota, pro).
  cluster.credentials:
    - name: pro-cluster
      server: https://kubernetes.default.svc
      domain: pro.local.{{ universe.domain }}
      config:
        tlsClientConfig:
          insecure: false
    - name: ota-cluster
      server: https://k3s-api.ota.local.{{ universe.domain }}:6443
      domain: ota.local.{{ universe.domain }}
      config:
        bearerToken: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/k8s_clusters/dev2:bearerToken') }}"
        tlsClientConfig:
          insecure: false
          caData: "{{ lookup('community.hashi_vault.vault_kv2_get', secret='{{ vault_secrets_mountpath }}/k8s_clusters/dev2:caData') }}"

# Define the AppProjects. These correspond with the different overlays in
# customize:
  app_projects:
    - name: dev
      namespace: "dev-*"  # This is a namespace prefix
      cluster: ota-cluster
    - name: test
      namespace: "test"
      cluster: ota-cluster
    - name: acc
      namespace: "acc"
      cluster: ota-cluster
    - name: pro
      namespace: "pro"
      cluster: pro-cluster
    - name: shs
      namespace: "*"  # TODO
      cluster: pro-cluster

  # Setup the different provisioning applications sets:
  # - cluster: The cluster that needs to be provisioned
  # - repo_url: The repository containing the definitions of the separate applications.
  # - types: A list with types to provision
  #     - type: can be either helm or kustomize
  #     - git_files: path mask for detecting the files for provisioning.
  # - project: one of the defined argocd-projects, this is also the name of the overlay that will be chosen
  # - namespace: the namespace to deploy the applications to
  application_sets:
    provisioning:
      - cluster: ota-cluster
        repo_url: "kad/ota-provision.git"
        types:
          - type: kustomize
            git_files_path: "*/kustomize-application.yaml"
          - type: helm
            git_files_path: "*/helm-application.yaml"
        project: ota-provision
        namespace: "-*"

      - cluster: pro-cluster
        repo_url: "kad/pro-provision.git"
        types:
          - type: kustomize
            git_files_path: "*/kustomize-application.yaml"
          - type: helm
            git_files_path: "*/helm-application.yaml"
        project: pro-provision
        namespace: "*"

    # Setup the different project applications sets:
    # - github_project: The project in github that needs to be scanned on deployments
    #   types:
    #     - type: kustomize or helm. Defines the type of deployement
    #       git_files_path: path(s) inside the repo for globbing the files.
    project:
      - github_project: KD
        types:
          - type: kustomize
            git_files_path:
              - "deployments/*/kustomize-application.yml"
              - "deployments/*/*/kustomize-application.yml"
              - "deployments/*/kustomize-application.yaml"
              - "deployments/*/*/kustomize-application.yaml"
          - type: helm
            git_files_path: ["deployments/*/helm-application.yaml", "deployments/*/*/helm-application.yaml"]
